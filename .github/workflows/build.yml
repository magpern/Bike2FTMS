name: Build and Create DFU

on:
  workflow_dispatch:
  push:
    tags:
      - '*'
    branches-ignore:
      - '**'
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    if: '!contains(github.event.head_commit.message, ''skip ci'') && !contains(github.event.head_commit.message, ''skip release'')'
    strategy:
      matrix:
        board: [promicro, pca10056, xiaoble]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # important for full history and tags
          fetch-tags: true

      - name: Derive version from Git
        id: version
        run: |
          SHA=$(git rev-parse --short HEAD)
      
          # Get the latest tag by sorting all tags (not just reachable ones)
          TAG=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$TAG" ]]; then
            TAG="0.0.0"
          fi
      
          if [[ "$GITHUB_EVENT_NAME" == "push" && "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION="$TAG"
          else
            VERSION="${TAG}-SNAPSHOT-${SHA}"
          fi
      
          echo "Derived version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install nrfutil 6.1.7
        run: |
          python -m pip install --upgrade pip
          pip install nrfutil==6.1.7

      - name: Download nRF5 SDK
        run: |
          wget https://www.nordicsemi.com/-/media/Software-and-other-downloads/SDKs/nRF5/Binaries/nRF5_SDK_17.1.0_ddde560.zip
          unzip nRF5_SDK_17.1.0_ddde560.zip -d /opt/
          rm nRF5_SDK_17.1.0_ddde560.zip

      - name: Install mergehex from Nordic CLI tools
        run: |
          wget https://nsscprodmedia.blob.core.windows.net/prod/software-and-other-downloads/desktop-software/nrf-command-line-tools/sw/versions-10-x-x/10-24-2/nrf-command-line-tools-10.24.2_linux-amd64.tar.gz
          tar -xzf nrf-command-line-tools-10.24.2_linux-amd64.tar.gz
          sudo cp nrf-command-line-tools/bin/mergehex /usr/local/bin/
          sudo chmod +x /usr/local/bin/mergehex

      - name: Set up environment variables
        run: |
          echo "NRF5_SDK_ROOT=/opt/nRF5_SDK_17.1.0_ddde560" >> $GITHUB_ENV
          echo "GNU_INSTALL_ROOT=/opt/gcc-arm-none-eabi-10.3-2021.10/bin/" >> $GITHUB_ENV
          echo "GNU_VERSION=10.3.1" >> $GITHUB_ENV
          echo "GNU_PREFIX=arm-none-eabi" >> $GITHUB_ENV

      - name: Download ARM GCC
        run: |
          wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
          tar -xf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2 -C /opt/
          rm gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2

      - name: Patch SoftDevice headers
        run: |
          mkdir -p /opt/nRF5_SDK_17.1.0_ddde560/components/softdevice/s340/headers/
          cp -r pca10056/s340/include/* /opt/nRF5_SDK_17.1.0_ddde560/components/softdevice/s340/headers/

      - name: Inject ANT license key
        run: |
          sed -i 's|#define ANT_LICENSE_KEY .*|#define ANT_LICENSE_KEY "${{ secrets.ANT_LICENSE_KEY }}"|' \
            /opt/nRF5_SDK_17.1.0_ddde560/components/softdevice/s340/headers/nrf_sdm.h

      - name: Build bootloader
        run: |
          cd bootloader/bootloader_s340/armgcc
          make -j4 RELEASE=1 BOARD=${{ matrix.board }}

      - name: Build application for ${{ matrix.board }}
        run: |
          cd pca10056/s340/armgcc
          make -j4 RELEASE=1 OPT=-O3 VERSION="${{ steps.version.outputs.version }}" CI=1 BOARD=${{ matrix.board }}

      - name: Write DFU private key to disk
        run: |
          echo "${{ secrets.DFU_PRIVATE_KEY }}" > private_key.pem

      - name: Generate DFU settings for ${{ matrix.board }}
        run: |
          cd pca10056/s340/armgcc
          nrfutil settings generate --family NRF52840 \
            --application _build_${{ matrix.board }}/nrf52840_xxaa_${{ matrix.board }}.hex \
            --application-version ${{ github.run_number }} \
            --bootloader-version 1 \
            --bl-settings-version 2 \
            --app-boot-validation VALIDATE_GENERATED_CRC \
            dfu_settings_${{ matrix.board }}.hex

      - name: Merge firmware hex for ${{ matrix.board }}
        run: |
          cd pca10056/s340/armgcc
          mergehex --merge \
            _build_${{ matrix.board }}/nrf52840_xxaa_${{ matrix.board }}.hex \
            dfu_settings_${{ matrix.board }}.hex \
            --output merged_firmware_${{ matrix.board }}.hex

      - name: Create DFU package for ${{ matrix.board }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          nrfutil pkg generate --hw-version 52 \
            --application pca10056/s340/armgcc/_build_${{ matrix.board }}/nrf52840_xxaa_${{ matrix.board }}.hex \
            --application-version ${{ github.run_number }} \
            --sd-req 0xCE \
            --key-file private_key.pem \
            bikeble_dfu-${{ matrix.board }}-${VERSION}.zip

      # New step: Create full manufacturing package (all components)
      - name: Create full manufacturing package for ${{ matrix.board }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Define paths to all components
          SOFTDEVICE_HEX="pca10056/s340/hex/ANT_s340_nrf52_7.0.1.hex"
          BOOTLOADER_HEX="bootloader/bootloader_s340/armgcc/_build_${{ matrix.board }}/bikeble_bootloader_${{ matrix.board }}.hex"
          APP_HEX="pca10056/s340/armgcc/_build_${{ matrix.board }}/nrf52840_xxaa_${{ matrix.board }}.hex"
          DFU_SETTINGS="pca10056/s340/armgcc/dfu_settings_${{ matrix.board }}.hex"
          
          # Create output files
          FULL_HEX="full_firmware_${{ matrix.board }}-${VERSION}.hex"
          FULL_DFU_PKG="bikeble_full_manufacturing_dfu-${{ matrix.board }}-${VERSION}.zip"
          
          # Merge all components into one hex file
          echo "Merging all components into one hex file..."
          mergehex --merge ${SOFTDEVICE_HEX} ${BOOTLOADER_HEX} ${APP_HEX} ${DFU_SETTINGS} --output ${FULL_HEX}
          
          # Create full DFU package for manufacturing
          echo "Creating full manufacturing DFU package..."
          nrfutil pkg generate --hw-version 52 \
            --application ${APP_HEX} \
            --application-version ${{ github.run_number }} \
            --bootloader ${BOOTLOADER_HEX} \
            --bootloader-version 1 \
            --softdevice ${SOFTDEVICE_HEX} \
            --sd-id 0xCE \
            --sd-req 0xCE \
            --key-file private_key.pem \
            ${FULL_DFU_PKG}

      - name: Upload artifacts for ${{ matrix.board }}
        uses: actions/upload-artifact@v4
        with:
          name: bikeble-${{ matrix.board }}-firmware
          path: |
            bikeble_dfu-${{ matrix.board }}-${{ steps.version.outputs.version }}.zip
          retention-days: 7
          
      # New step: Upload manufacturing artifacts separately
      - name: Upload manufacturing artifacts for ${{ matrix.board }}
        uses: actions/upload-artifact@v4
        with:
          name: bikeble-${{ matrix.board }}-manufacturing
          path: |
            bikeble_full_manufacturing_dfu-${{ matrix.board }}-${{ steps.version.outputs.version }}.zip
            full_firmware_${{ matrix.board }}-${{ steps.version.outputs.version }}.hex
          retention-days: 7

      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bikeble_dfu-${{ matrix.board }}-${{ steps.version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
